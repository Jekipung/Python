프로그래머스 155651번 문제 풀기.
"""
알고리즘
대실  시작시간이 빠른 순서대로 값들을 가져온다.
현재 보고 있는 원소의 대실 시작시간이 가장 최근에 퇴실한 시간 + 10분(청소시간) 보다 빠르다면,
새로운 방이 필요한 것이므로 방을 추가로 사용
그게 아니라 대실 시작 시간이 더 느리다면 이미 퇴실된 방에 해당 손님을 입실 시킨다.
위 과정을 반복하며 매번 현재 사용중인 방의 개수를 파악하여 이전 보다 더 많이 사용하고 있다면
최대 사용한 방의 개수를 갱신
"""

def solution(book_time):   # book_time = [ [대실 시작 시간, 대실 종료 시간], ... ]
    # 퇴실 후 10분간 청소시간이 있다.
    for i in range(len(book_time)):
        for j in range(len(book_time[i])):
            h,m = book_time[i][j].split(':')
            minute = int(h) * 60 + int(m)
            book_time[i][j] = minute
            

    return 0

book_time = [["15:00", "17:00"], ["16:40", "18:20"], ["14:20", "15:20"], ["14:10", "19:20"], ["18:20", "21:20"]]
print(solution(book_time))






백준 1531번 문제 풀기.


백준 4108번 풀기

# R, C. 행과 열의 값을 받아
# R개씩 C줄로 폭탄은* 빈공간은.을 입력한다.
# 이때 공백이 없도록 입력한다.
# 이후 입력에 0 0이 들어오면 코드를 멈춘다.(마지막이란 뜻이다.)
# 출력할때 *은 그대로 납두는 대신, .에 위치에
# 인접한 지뢰의 개수를 담아 출력한다.
# 최단경로 알고리즘을 구현할때처럼, 이동할수있는 거리를 리스트로 담아놓고,
# for문을 이용하여 탐색하려 인접한 지뢰의 개수를 구하고,
# 출력때 .에 위치에 그 인접한 지뢰의 개수를 출력한다.




import sys
input = sys.stdin.readline

# while문이 작동하기위해 R,C에 0을 제외한 임이의 값을 넣어둔다.

# move = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]
moveX = [-1,0,1]
moveY = [-1,0,1]

while True:
    R, C = map(int, input().split())
    if R == 0 and C == 0:
        break
    world = [list(input().rstrip()) for _ in range(R)]
    for x in moveX:
        for y in moveY:
            if x == 0 and y == 0:
                continue
            for i in range(R):
                for j in range(C):
                    if world[i][j] == "*":
                        if i+x >= 0 and i+x <= R and i+y >= 0 and i+y <= C:
                            if world[i+x][j+y] == ".":
                                world[i+x][j+y] = 1
                            elif world[i+x][j+y] == "*":
                                pass
                            else:
                                world[i+x][j+y] += 1
    print(world)

마이크로소프트 자체 한글
https://yololife-sy.medium.com/%ED%95%9C%EA%B8%80-%EC%9D%B8%EC%BD%94%EB%94%A9-utf8-cp949-%EC%9D%B8%EC%BD%94%EB%94%A9%EC%9D%B4-%EB%AD%90%EC%95%BC-%EC%9D%B4%EA%B1%B4-%EB%AC%B4%EC%8A%A8-%EC%97%90%EB%9F%AC%EC%9D%B8%EA%B1%B0%EC%95%BC-a9803fd042dd

구글사의 mobilenet의 pose estimation. (포즈추정)
https://www.tensorflow.org/lite/examples/pose_estimation/overview?hl=ko





깃허브, 노션 정리하기.


정리해야 할 목록.
https://night-knight.tistory.com/entry/%ED%95%9C-%EB%B2%88%EC%9C%BC%EB%A1%9C-%EC%BD%94%EB%94%A9-%EC%97%AD%EB%9F%89%EC%9D%84-%ED%96%A5%EC%83%81%ED%95%98%EB%8A%94-%EB%8F%99%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-%F0%9F%94%A5
https://velog.io/@chnh506/Top-down-%EB%B0%A9%EC%8B%9D%EA%B3%BC-Bottom-up-%EB%B0%A9%EC%8B%9D
https://velog.io/@polynomeer/%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95Dynamic-Programming
https://hyul-mode.tistory.com/entry/%EB%B0%B1%EC%A4%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC-%EB%86%93%EA%B8%B0-Python
https://wikidocs.net/130632
https://ctkim.tistory.com/entry/python-filter-function
https://ctkim.tistory.com/entry/%EC%9C%A0%EB%8B%88%ED%8B%B0%EC%97%90%EC%84%9C-new-%ED%82%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0
https://loklee9.tistory.com/127
https://ddingmin00.tistory.com/entry/%ED%8C%8C%EC%9D%B4%EC%8D%AC-2%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4-%EB%8B%A4%EC%A4%91-%EC%A1%B0%EA%B1%B4%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0
https://wikidocs.net/64

이거 써보기
https://web.archive.org/

* 코딩 문제중 시간관련 문제에 가장 중요한 점은 단위 통일이다.
ex) 1h -> 60m
