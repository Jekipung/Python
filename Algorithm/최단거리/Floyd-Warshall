# Floyd-Warshall 알고리즘
# matrix: 인접 행렬
def floyd_warshall(matrix):
    # 정점의 개수
    v = len(matrix)

    # 1. 최단 거리 테이블 생성 및 초기값 설정
    d = [[float('inf')] * v for _ in range(v)]
    for x in range(v):
        for y in range(v):
            d[x][y] = matrix[x][y]

    # 2. 중간 지점 노드 m에 대하여 x -> m -> y 비용을 계산하며 최단  거리 갱신
    for m in range(v):
        for x in range(v):
            for y in range(v):
                d[x][y] = min(d[x][y], d[x][m] + d[m][y])

    return d

inf = float('inf')
amatrix = [
    [0,   3,   inf, inf],
    [4,   0,   2,   4  ],
    [7,   5,   0,   3  ],
    [inf, inf, 1,   0  ]
]

dist = floyd_warshall(amatrix)
print(dist)
# 출력값
# [
#     [0, 3, 5, 7],
#     [4, 0, 2, 4],
#     [7, 5, 0, 3],
#     [8, 6, 1, 0]
# ]
