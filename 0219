# 문자열 자료형은 immutable하다. 변하지 않는다.
# => 추가 수정이 불가능하다.
# => 자료형 관련함수들이 결과값을 돌려준다.

# ex)
# o = "abce"
# o.replace('a', 'A')
# print(o)      #변경되지 않는다. 변경을 원한다면 제 할당을 해야한다.

# 관련함수

# replace(old: str, new:str): old 문자를 new 문자로 변경한 문자열을 돌려준다.
# o = "abce"
# print(o.replace('a', 'A'))   # 출력: Abcd

# .splite: ()안의 문자열을 기준으로 분리시킨 문자열을 저장한 리스트를 돌려준다.
#          ()안에 아무것도 넣지 않았을 경우, 공백 문자들을 기준으로 분리한다.

# count(substr): ()안에 문자열이 원본 문자열 string에 몇 개 존재하는지를 돌려준다.

# index(): ()안에 문자열이 원본 문자열 string에 몇 번째에 있는지를 돌려준다.
#          여러개 존재하면 index 번호가 빠른 값을 돌려준다.
#          없을 시. INDEXERROR발생
# a = "Helloworld"
# print(a.index("l"))   # 출력: 2

# find():  ()안에 문자열이 원본 문자열 string에 몇 번째에 있는지를 돌려준다.
#          여러개 존재하면 index 번호가 빠른 값을 돌려준다.
#          없을 시. -1반환

# upper(): 원본 문자열을 모두 대문자로 변경한 문자열로 돌려주는 함수
# s = "Helloworld"
# print(s.upper())   # 출력: HELLOWORLD

# lower(): 원본 문자열을 모두 소문자로 변경한 문자열로 돌려주는 함수
# d = "HELLOWORLD"
# print(d.lower())   # 출력: helloworld

# isupper(): 원본 문자열이 모두 대문자인지를 돌려주는 함수
# a = "helloworld"
# print(a.isupper())   # 출력: False

# islower(): 원본 문자열이 모두 소문자인지를 돌려주는 함수


# isdigit()
# a = "Helloworld"
# b = "123123"
# c = "123 123"
# print(a.isdigit())   # 출력: False
# print(b.isdigit())   # 출력: True
# print(c.isdigit())   # 출력: False

# isalpha()   원본 문자열이 모두 알파벳인지를 돌려주는 함수


# isalnum()   원본 문자열이 모두 알파벳 또는 숫자인지를 돌려주는 함수


# capitalize()   가장 앞글자를 제외한 모든 글자를 소문자로 돌려주는 함수
a = "HeJVHGJKJo wFDSGGld"
print(a.capitalize())


# strip()   양 끝에서 안쪽으로 들어오면서 ()안의 문자열이 연속되지 않을때까지 지운 문자열을 돌려주는 함수
#           단 괄호안에 아무것도 넣지 않을 경우, 공백을 기준으로 삼는다.
a = "...abcd...efg......"
print(a.strip('.'))   # 출력: abcd...efg

# join()   ()안에 문자열 또는 리스트가 올 수 있으며, 해당 문자열/리스트의 원소값 사이에, .앞의 문자열을 더한다.
#          ()안에 리스트를 넣을 경우, 해당 리스트의 원소값은 모두 문자열이여야만 한다.
b = "Hello world"
print('-'.join(b))   # 출력: H-e-l-l-o- -w-o-r-l-d
b = ['a','b','c','d','e','f']
print('-'.join(b)) # 출력: a-b-c-d-e-f
print(''.join(b)) # 출력: abcdef


# s = "Hello world"




# 문자열 생성시 중간에 변수값을 문자열로 변경하여 추가 형식문자열 formating
# name = "김규현"
# age = 18
# result = "제 이름은 %s이고, 나이는 %d살입니다." %(name, age)
# print(result)
# result = "제 이름은 {}이고, 나이는 {}살입니다.".format(name, age)
# print(result)
# result = f"제 이름은 {name}이고, 나이는 {age}살입니다."
# print(result)

# print("\"안녕하세요\"")
# print("\\\"\안녕하세요\\\"\\")

# 리스트는 mutable한 자료형이다. 추가 삭제 수정이 가능하다.

# for 문에 사용 가능한 자료형이다. => iterable한 자료형이다.

#덧셈, 곱셈 연산이 가능하다.

# 자료형이 타입을 변경시킬 수 있다. join()을  이용해서 리스트를 문자열로, split()을 사용해서 문자열을 리스트로
#                             list()로 문자열을 리스트로 형변환 가능하다. 원ㅅ값은 문자 별로 들어간다.
#                             반대로 str()을 이용해서 리스트를 문자열로 변경 가능하다. 이 경우 0번째 문자는 [가 된다.

# 관련함수

# count():   ()안의 값이 리스트에 몇 개 존재하는지 돌려준다.


# index():   ()안의 값이 리스트의 몇 번째에 존재하는지를 돌려준다.

#############################################################

# append()


# insert(index, value):   원본리스트의 index번째의 value값을 추가한다. 기존에 index번째에 있던 값부터 마지막까지는 한칸씩 밀린다.

# extend(iterable):   ()안에는 iterable한 자료형만 올 수 있고, 해당 iterable한 자료형의 원소값을 하나씩 추가한다.
#                     원본 리스트의 길이는 iterable한 자료형의 길이만큼 증가하게 된다.

#############################################################

# remove():

# reverse():
