백준 프린터 
import sys
input = sys.stdin.readline

t = int(input())
for _ in range(t):
    n , m  = map(int, input().split()) # n:문서의 개수 m:몇번째로 인쇄될지 궁금한 문서
    priorites = list(map(int,input().split())) # 문서의 중요도가 담긴 리스트 ()
    cnt = 0 # 현재 출력된 문서의 수
    document = list(enumerate(priorites))               # ([0,1][1,2][2,3][3,4])
    max_priorites = max(priorites)                      # 중요도 중에서 가장 높은 값
    printed = []                                         # 출력 순서대로 문서들을 넣어줄 리스트
    while document:
        top = document.pop(0)                           # <= [문서의 순번, 중요도]
        if top[1] == max_priorites:
            printed.append(top[0])
            del priorites[0]
            if not priorites:
                break
            max_priorites = max(priorites)
        else:
            document.append(top)
            priorites.append(priorites.pop(0))
    for p in range(len(printed)):
        if printed[p] == m:
            print(p+1)


Deque
class DequeElement:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right

class Deque:
    def __init__(self):
        self.rear = None
        self.front = None

    def insert_rear(self, data):
        if self.rear is None:
            elem = DequeElement(data,None,None)
            self.rear = self.front = elem
        else:
            elem = DequeElement(data,None,self.rear)
            self.rear.left = elem
            self.rear = elem

    def insert_front(self,data):
        if self.front is None:
            elem = DequeElement(data,None,None)
            self.rear = self.front = elem
        else:
            elem = DequeElement(data,self.front,None)
            self.front.right = elem
            self.front = elem

    def delete_rear(self):
        if self.rear is None:
            return None
        elif self.rear == self.front:
            ret_data = self.rear.data
            self.rear = self.front = None
            return ret_data
        else:
            ret_data = self.rear.data
            self.rear = self.rear.right
            self.rear.left = None
            return ret_data

    def delete_front(self):
        if self.front is None:
            return None
        elif self.front == self.rear:
            ret_data = self.front.data
            self.front = self.rear = None
            return ret_data
        else:
            ret_data = self.front.data
            self.front = self.front.left
            self.front.right = None
            return ret_data

    def reverse(self):
        curr = self.front
        while curr:
            curr.left, curr.right = curr.right, curr.left
            curr = curr.right
        self.rear, self.front = self.front, self.rear

#출력 예시
dq = Deque()
for i in range(1, 11):
    if i % 2 == 0:
        dq.insert_rear(i)
    else:
        dq.insert_front(i)

dq.reverse()

for _ in range(5):
    print(dq.delete_front(),end = ' -> ')
for _ in range(5):
    print(dq.delete_rear(), end = ' -> ')

숙제 : https://school.programmers.co.kr/learn/courses/30/lessons/154540
