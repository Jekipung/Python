# """
# 튜플(tuple): 수정이 불가능하다. 인덱스번호를 사용하므로 인덱싱, 슬라이싱이 가능하다.
# 선언할 때 ()와 , 를 사용해서 선언한다.
# 덧셈(tuple + tuple), 곱셈(tuple * int) 연산이 가능하다.
# 튜플은 소괄호 없이도 생성이 가능하다.
# 언패킹(unpacking):
#
#
# """

"""
딕셔너리(dict): {key:value, } 수정이 가능한 자료형, 연관 배열, hash(함수),
딕셔너리 키값에 사용
가능한 자료형   : int, float, str, tuple, Bool   <- immutable한 자료형
불가능한 자료형 : list, dict, set                <- mutable한 자료형

선언과 수정의 차이가 없다.
(동일한 키가 존재하면 중복 제거 되어 하나의 키값으로만 사용 가능하기 때문에)

D = {}
D['a'] = 1   # 이건 추가
print(D)     # 출력값:1
D['a'] = 2   # 이건 수정
print(D)     # 출력값:2

dict.get(key, default = None):키값을 넘겼을 때 해당 키가 딕셔너리에 존재하면
그에 대응하는 value를 돌려주고, 없다면, 기본은 None 따로 넘긴값이 있으면 그 값을 돌려준다.
Dict = {'a':1, 'b':2, 'c':3}
print(D.get('a')              # 출력값:1
print(D.get('A')              # 출력값:None
print(D.get('A',"없습니다.")   # 출력값:없습니다

dict.keys()     : 딕셔너리 내부의 키값들만 반환, 단 자료형은 dict_keys라는 자료형으로서 리스트나 튜플이 아니므로 관련함수 사용할 때 조심
dict.values()   : 딕셔너리 내부의 벨류값들만 반환, 단 자료형은 dict_values라는 자료형으로서 리스트나 튜플이 아니므로 관련함수 사용할 때 조심
dict.items()    : 딕셔너리 내부의 키,벨류를 튜플로 묶어준 값을 반환, 단 자료형은 dict_items라는 자료형으로서 리스트나 튜플이 아니므로 관련함수 사용할 때 조심
"""

"""
집합: set()
특징:
중복제거, 순서가 없다 => index 사용 불가 => 인덱싱, 슬라이싱 불가

"""

"""
불:(bool): True/False
자료형의 참과 거짓

"""
